package com.azizutku.movie.extensions

import com.azizutku.movie.BuildPlugins
import kotlinx.kover.gradle.plugin.dsl.KoverProjectExtension
import org.gradle.api.Project
import org.gradle.kotlin.dsl.configure
import org.gradle.kotlin.dsl.dependencies

private val coverageExclusions = listOf(
    // Android
    "*Fragment",
    "*Fragment\$*",
    "*Activity",
    "*Activity\$*",
    "*Adapter",
    "*Adapter\$*",
    "*ViewHolder",
    "*ViewHolder\$*",
    "*Dialog",
    "*Dialog\$*",
    "*R.class",
    "*R\$*.class",
    "*.BuildConfig",
    "*Manifest*.*",
    "*.databinding.*",
    "*BR.*",
    "*Test*.*",
    "android/**/*.*",
    // Kotlin
    "*MapperImpl*.*",
    "*Component*.*",
    "*BR*.*",
    "*Manifest*.*",
    "*Args*",
    "*Module*.*",
    "*Dagger*.*",
    "*Hilt*.*",
    "*_HiltModules*",
    "*MembersInjector*.*",
    "*_MembersInjector.class",
    "*_Factory*.*",
    "*_Factory\$*",
    "*_Provide*Factory*.*",
    // Sealed and data classes
    "*$Result.*",
    "*$Result$*.*",
    "*Dto*",
    "*Entity*",
    // Autogenerated classes by 'kotlinx.serialization'
    "*serializer*.*",
    "*LocalDataSourceImpl.*", // Covered in androidTest
)

internal fun Project.configureKover() {
    dependencies {
        rootProject.subprojects.filter { plugins.hasPlugin(BuildPlugins.KOTLINX_KOVER) }.forEach { subproject ->
            if (subproject.path.startsWith(":core:") || subproject.path.startsWith(":feature:")) {
                add("kover", project(subproject.path))
            }
        }
    }
    configure<KoverProjectExtension> {
        reports {
            filters {
                excludes {
                    classes(coverageExclusions)
                    packages(
                        "*.di",
                        "hilt_aggregated_deps",
                        "dagger.hilt.internal.aggregatedroot.codegen",
                    )
                    annotatedBy("*Generated*")
                    androidGeneratedClasses()
                }
            }
        }
    }
}
